/**
 * Created by EvanYao on 2015
 * 该方法是原生typeof的替换选择
 * 为了解决js中变量类型无法准备判断的问题
 * 主要区别在: 默认识别null,array, 加强识别DOM Obj, NaN, RegExp, Date等特殊对象,
 * 及Set, Map这样的新增数据结构, async function 和 generator function新增方法类型
 */

    var dic={
        '[object Object]':'object',
        '[object RegExp]':'regexp',
        '[object Date]':'date',
        '[object Array]':'array',
        '[object Map]':'map',
        '[object Set]':'set',
        '[object Symbol]':'symbol',
        '[object String]':'string',
        '[object Number]':'number',
        '[object Boolean]':'boolean',
        '[object Promise]':'promise',
        '[object Error]':'error',
        '[object Window]':'window',
        '[object GeneratorFunction]':'generatorfunction',
        '[object AsyncFunction]':'asyncfunction'
    };

    var toStr=Object.prototype.toString;

    /*
    var lowFirst=function(str){
        return str.replace(/\b(\w)(\w*)/g, function($0, $1, $2) {
            return $1.toLowerCase() + $2;
        });
    };
    */
/* version 1.0
 function(x,plus){
        // null
        if(x===null)
            return 'null';
        // array
        else if(Array.isArray && Array.isArray(x))
            return 'array';
        // special fn
        if(typeof x==='function')
            return plus ? dic[toStr.call(x)] : 'function';
        // primitive, and NaN when in plus mode
        else if(typeof x !=='object')
            return (plus && x!==x)?'nan':typeof x;
        // else use typeof or toStr
        else if(!plus)
            return typeof x;
        else
            return dic[toStr.call(x)] || toStr.call(x).slice(8,-1).toLowerCase() || 'object';
    };
*/

/* version 2.0 */
function typeOf(x,plus){
    if(plus!==true){
        // null
        if(x===null)
            return 'null';
        // array
        else if(Array.isArray(x)) // IE8- go hell || dic[toStr.call(x)]==='array')
            return 'array';
        // just as typeof
        else
            return typeof x;
    }
    else{
        // null
        if(x===null)
            return 'null';
        // NaN
        else if(x!==x)
            return 'nan';
        // just use toStr
        else
            return dic[toStr.call(x)] || toStr.call(x).slice(8,-1).toLowerCase() || 'object';
    }
}

module.exports = typeOf;