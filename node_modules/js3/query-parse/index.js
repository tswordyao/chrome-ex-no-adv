var reg=new RegExp('[\?\&][^\?\&]+=[^\?\&]*','g');
var hasProp=Object.prototype.hasOwnProperty;

// {a:1,b:2} => a=1&b=2
function serializeObj2queryStr(obj) {
    var str='';
    for(var n in obj){
        if(hasProp.call(obj,n)){
            str+='&'+n+'='+obj[n];
        }
    }
    return str.slice(1);
}

// a=1&b=2 => {a:1,b:2}
function parseQueryStr2obj(query) {
    var obj=Object.create?Object.create(null):{};
    var matchResult;
    var matchLen;
    var midArr;
    var i;

    query[0]==='?' || query[0]==='&' || ( query = '?'+query );

    matchResult =query.match(reg);
    if(matchResult===null){
        // keep obj empty
    }
    else{
        matchLen=matchResult.length;
        for(i=0;i<matchLen;i++){
            midArr=matchResult[i].slice(1).split('=');
            obj[midArr[0]]=midArr[1];
        }
    }

    return obj;
}

function queryParse(arg){
    if(arguments.length===0){
        if(typeof window==='undefined'){
            throw new Error('type error:window is undefined, need one arg at least!');
        }
        else{
            return parseQueryStr2obj( (window.location.search||'').trim() );
        }
    }
    else if(arg==null){ // or undefined
        return Object.create?Object.create(null):{};
    }
    else if(typeof arg==='string'){
        return parseQueryStr2obj(arg);
    }
    else if(typeof arg==='object'){
        return serializeObj2queryStr(arg);
    }
    else{
        throw new Error('type error:the arg neither object nor string!');
    }

}

module.exports = queryParse;